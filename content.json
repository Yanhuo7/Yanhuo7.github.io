{"meta":{"title":"WTF","subtitle":"","description":"","author":"玄","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2024-05-26T08:05:08.000Z","updated":"2024-05-26T08:05:08.711Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"德州开发笔记","slug":"德州开发笔记","date":"2024-05-26T14:12:29.000Z","updated":"2024-05-26T15:40:16.504Z","comments":true,"path":"2024/05/26/德州开发笔记/","link":"","permalink":"http://example.com/2024/05/26/%E5%BE%B7%E5%B7%9E%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/","excerpt":"","text":"1.getClass()方法使用作用：获取运行时对象所属类的详细信息。 getClass() 方法是 Java 中的 Object 类的一部分，每个 Java 对象都继承自 Object 类。因此，所有 Java 对象都可以使用 getClass() 方法。这个方法的作用是返回对象的运行时类对象 (Class 对象)，用于获取对象所属类的详细信息。 getClass() 方法返回一个 Class&lt;?&gt; 类型的对象， 反射操作： 反射是 Java 提供的一种功能，允许在运行时获取类的信息并操作对象。例如： 123Class&lt;?&gt; clazz = object.getClass();Method method = clazz.getMethod(&quot;methodName&quot;);method.invoke(object); 通过 getClass() 获取的 Class 对象，可以进一步获取类的方法、字段、构造函数等信息，并对其进行操作。 类型检查和转换： getClass() 方法可以用于类型检查，以确保对象属于特定的类。例如： 123if (object.getClass() == SomeClass.class) &#123; // 类型匹配&#125; 2.如何重写hashcode方法重写 hashCode 方法的步骤 选择属性： 选择那些参与 equals 方法比较的属性来计算哈希码。 计算哈希码： 使用一个合适的算法来计算哈希码。常见的方法是将这些属性的哈希码组合起来。 作用: 在判断对象是否相等时，首先计算hashcode是否一样，一样再计算对象的属性值内容是否一致 如果hashcode不一样，则对象一定不一样 12345678910111213141516171819202122232425262728293031323334353637383940import java.util.Objects;public class Person &#123; private int id; private String name; private int age; public Person(int id, String name, int age) &#123; this.id = id; this.name = name; this.age = age; &#125; @Override public boolean equals(Object o) &#123; if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Person person = (Person) o; return id == person.id &amp;&amp; age == person.age &amp;&amp; Objects.equals(name, person.name); &#125; @Override public int hashCode() &#123; return Objects.hash(id, name, age);//使用工具类计算hash &#125; public static void main(String[] args) &#123; Person p1 = new Person(1, &quot;Alice&quot;, 30); Person p2 = new Person(1, &quot;Alice&quot;, 30); Person p3 = new Person(2, &quot;Bob&quot;, 25); System.out.println(p1.hashCode()); // same as p2 System.out.println(p2.hashCode()); // same as p1 System.out.println(p3.hashCode()); // different from p1 and p2 &#125;&#125; 手动计算哈希值 使用31 * n + value的方式计算哈希值，其中n是一个非零常数。这种方式可以提供良好的分布性能，尤其是对于字符串、数组和集合这样的数据结构。 123456789@Overridepublic int hashCode() &#123; int result = 17; // 一个任意的非零常数 result = 31 * result + id; result = 31 * result + (name != null ? name.hashCode() : 0); result = 31 * result + age; return result;&#125; 1234567891011@Testpublic void test()&#123; int a =1; int b =3; int c =3; System.out.println(Objects.hash(a)); //输出32 System.out.println(Objects.hash(b)); //34 System.out.println(Objects.hash(c)); //34&#125; 3. Collections.sort用法Collections.sort 是 Java 中用于对列表进行排序的一个静态方法。它提供了简单、方便的方式来对列表中的元素进行自然顺序排序或者根据指定的比较器进行排序。 自然顺序排序是基于元素的自然顺序进行的排序，要求列表中的元素实现 Comparable 接口，并重写 compareTo 方法。 123List&lt;Integer&gt; numbers = Arrays.asList(5, 2, 9, 1, 3); Collections.sort(numbers); System.out.println(numbers); // 输出: [1, 2, 3, 5, 9] Integer 和 String 类都实现了 Comparable 接口，所以可以直接使用 Collections.sort 进行排序。 4. list.sort(Comparator.reverseOrder())对集合降序排序 Comparator.reverseOrder 是 Comparator 接口的一个静态方法，返回一个降序比较器，该比较器是自然顺序的逆序。换句话说，它对元素进行降序排序。 123List&lt;Integer&gt; numbers = Arrays.asList(5, 2, 9, 1, 3); numbers.sort(Comparator.reverseOrder()); System.out.println(numbers); // 输出: [9, 5, 3, 2, 1] 5.list.subList方法从一个 List 中获取其子列表（sublist）。该方法返回的子列表是原列表的视图（view），这意味着对子列表的修改会直接影响原列表，反之亦然。 1List&lt;E&gt; subList(int fromIndex, int toIndex) fromIndex：子列表的起始位置（包含）。 toIndex：子列表的结束位置（不包含）","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2023-07-15T17:39:46.081Z","updated":"2023-02-11T13:19:08.210Z","comments":true,"path":"2023/07/16/hello-world/","link":"","permalink":"http://example.com/2023/07/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}